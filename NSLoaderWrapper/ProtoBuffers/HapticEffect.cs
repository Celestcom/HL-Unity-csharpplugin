// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HapticEffect.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace NullSpaceHaptics {

  /// <summary>Holder for reflection information generated from HapticEffect.proto</summary>
  public static partial class HapticEffectReflection {

    #region Descriptor
    /// <summary>File descriptor for HapticEffect.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static HapticEffectReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJIYXB0aWNFZmZlY3QucHJvdG8SEE51bGxTcGFjZUhhcHRpY3MiSgoGRWZm",
            "ZWN0EgwKBHRpbWUYASABKAISDgoGZWZmZWN0GAIgASgJEhAKCHN0cmVuZ3Ro",
            "GAMgASgCEhAKCGR1cmF0aW9uGAQgASgCImMKCFNlcXVlbmNlEikKB2VmZmVj",
            "dHMYASADKAsyGC5OdWxsU3BhY2VIYXB0aWNzLkVmZmVjdBIMCgR0aW1lGAIg",
            "ASgCEhAKCHN0cmVuZ3RoGAMgASgCEgwKBGFyZWEYBCABKA0iWAoHUGF0dGVy",
            "bhItCglzZXF1ZW5jZXMYASADKAsyGi5OdWxsU3BhY2VIYXB0aWNzLlNlcXVl",
            "bmNlEgwKBHRpbWUYAiABKAISEAoIc3RyZW5ndGgYAyABKAIiWQoKRXhwZXJp",
            "ZW5jZRIrCghwYXR0ZXJucxgBIAMoCzIZLk51bGxTcGFjZUhhcHRpY3MuUGF0",
            "dGVybhIMCgR0aW1lGAIgASgCEhAKCHN0cmVuZ3RoGAMgASgCIokCCgpIYXB0",
            "aWNGaWxlEi8KBHR5cGUYASABKA4yIS5OdWxsU3BhY2VIYXB0aWNzLkhhcHRp",
            "Y0ZpbGUuVHlwZRIsCghzZXF1ZW5jZRgCIAEoCzIaLk51bGxTcGFjZUhhcHRp",
            "Y3MuU2VxdWVuY2USKgoHcGF0dGVybhgDIAEoCzIZLk51bGxTcGFjZUhhcHRp",
            "Y3MuUGF0dGVybhIwCgpleHBlcmllbmNlGAQgASgLMhwuTnVsbFNwYWNlSGFw",
            "dGljcy5FeHBlcmllbmNlIj4KBFR5cGUSCwoHVU5LTk9XThAAEgwKCFNFUVVF",
            "TkNFEAESCwoHUEFUVEVSThACEg4KCkVYUEVSSUVOQ0UQAyKLAQoKUm9vdEVm",
            "ZmVjdBIMCgRuYW1lGAEgASgJEi8KBHR5cGUYAiABKA4yIS5OdWxsU3BhY2VI",
            "YXB0aWNzLlJvb3RFZmZlY3QuVHlwZSI+CgRUeXBlEgsKB1VOS05PV04QABIM",
            "CghTRVFVRU5DRRABEgsKB1BBVFRFUk4QAhIOCgpFWFBFUklFTkNFEAMiTQoL",
            "UGF0dGVybk5vZGUSDAoEdGltZRgBIAEoAhIQCghzZXF1ZW5jZRgCIAEoCRIM",
            "CgRhcmVhGAMgASgNEhAKCHN0cmVuZ3RoGAQgASgCIkEKDkV4cGVyaWVuY2VO",
            "b2RlEgwKBHRpbWUYASABKAISDwoHcGF0dGVybhgCIAEoCRIQCghzdHJlbmd0",
            "aBgDIAEoAiJAChNTZXF1ZW5jZURlZmluaXRpb25zEikKB2VmZmVjdHMYASAD",
            "KAsyGC5OdWxsU3BhY2VIYXB0aWNzLkVmZmVjdCJKChJQYXR0ZXJuRGVmaW5p",
            "dGlvbnMSNAoNcGF0dGVybl9ub2RlcxgBIAMoCzIdLk51bGxTcGFjZUhhcHRp",
            "Y3MuUGF0dGVybk5vZGUiUwoVRXhwZXJpZW5jZURlZmluaXRpb25zEjoKEGV4",
            "cGVyaWVuY2Vfbm9kZXMYASADKAsyIC5OdWxsU3BhY2VIYXB0aWNzLkV4cGVy",
            "aWVuY2VOb2RlIpIFChVIYXB0aWNEZXNjcmlwdGlvbkZpbGUSLAoGZWZmZWN0",
            "GAEgASgLMhwuTnVsbFNwYWNlSGFwdGljcy5Sb290RWZmZWN0El4KFHNlcXVl",
            "bmNlX2RlZmluaXRpb25zGAIgAygLMkAuTnVsbFNwYWNlSGFwdGljcy5IYXB0",
            "aWNEZXNjcmlwdGlvbkZpbGUuU2VxdWVuY2VEZWZpbml0aW9uc0VudHJ5ElwK",
            "E3BhdHRlcm5fZGVmaW5pdGlvbnMYAyADKAsyPy5OdWxsU3BhY2VIYXB0aWNz",
            "LkhhcHRpY0Rlc2NyaXB0aW9uRmlsZS5QYXR0ZXJuRGVmaW5pdGlvbnNFbnRy",
            "eRJiChZleHBlcmllbmNlX2RlZmluaXRpb25zGAQgAygLMkIuTnVsbFNwYWNl",
            "SGFwdGljcy5IYXB0aWNEZXNjcmlwdGlvbkZpbGUuRXhwZXJpZW5jZURlZmlu",
            "aXRpb25zRW50cnkaYQoYU2VxdWVuY2VEZWZpbml0aW9uc0VudHJ5EgsKA2tl",
            "eRgBIAEoCRI0CgV2YWx1ZRgCIAEoCzIlLk51bGxTcGFjZUhhcHRpY3MuU2Vx",
            "dWVuY2VEZWZpbml0aW9uczoCOAEaXwoXUGF0dGVybkRlZmluaXRpb25zRW50",
            "cnkSCwoDa2V5GAEgASgJEjMKBXZhbHVlGAIgASgLMiQuTnVsbFNwYWNlSGFw",
            "dGljcy5QYXR0ZXJuRGVmaW5pdGlvbnM6AjgBGmUKGkV4cGVyaWVuY2VEZWZp",
            "bml0aW9uc0VudHJ5EgsKA2tleRgBIAEoCRI2CgV2YWx1ZRgCIAEoCzInLk51",
            "bGxTcGFjZUhhcHRpY3MuRXhwZXJpZW5jZURlZmluaXRpb25zOgI4AWIGcHJv",
            "dG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::NullSpaceHaptics.Effect), global::NullSpaceHaptics.Effect.Parser, new[]{ "Time", "Effect_", "Strength", "Duration" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NullSpaceHaptics.Sequence), global::NullSpaceHaptics.Sequence.Parser, new[]{ "Effects", "Time", "Strength", "Area" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NullSpaceHaptics.Pattern), global::NullSpaceHaptics.Pattern.Parser, new[]{ "Sequences", "Time", "Strength" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NullSpaceHaptics.Experience), global::NullSpaceHaptics.Experience.Parser, new[]{ "Patterns", "Time", "Strength" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NullSpaceHaptics.HapticFile), global::NullSpaceHaptics.HapticFile.Parser, new[]{ "Type", "Sequence", "Pattern", "Experience" }, null, new[]{ typeof(global::NullSpaceHaptics.HapticFile.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NullSpaceHaptics.RootEffect), global::NullSpaceHaptics.RootEffect.Parser, new[]{ "Name", "Type" }, null, new[]{ typeof(global::NullSpaceHaptics.RootEffect.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NullSpaceHaptics.PatternNode), global::NullSpaceHaptics.PatternNode.Parser, new[]{ "Time", "Sequence", "Area", "Strength" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NullSpaceHaptics.ExperienceNode), global::NullSpaceHaptics.ExperienceNode.Parser, new[]{ "Time", "Pattern", "Strength" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NullSpaceHaptics.SequenceDefinitions), global::NullSpaceHaptics.SequenceDefinitions.Parser, new[]{ "Effects" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NullSpaceHaptics.PatternDefinitions), global::NullSpaceHaptics.PatternDefinitions.Parser, new[]{ "PatternNodes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NullSpaceHaptics.ExperienceDefinitions), global::NullSpaceHaptics.ExperienceDefinitions.Parser, new[]{ "ExperienceNodes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NullSpaceHaptics.HapticDescriptionFile), global::NullSpaceHaptics.HapticDescriptionFile.Parser, new[]{ "Effect", "SequenceDefinitions", "PatternDefinitions", "ExperienceDefinitions" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Effect : pb::IMessage<Effect> {
    private static readonly pb::MessageParser<Effect> _parser = new pb::MessageParser<Effect>(() => new Effect());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Effect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NullSpaceHaptics.HapticEffectReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Effect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Effect(Effect other) : this() {
      time_ = other.time_;
      effect_ = other.effect_;
      strength_ = other.strength_;
      duration_ = other.duration_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Effect Clone() {
      return new Effect(this);
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private float time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "effect" field.</summary>
    public const int Effect_FieldNumber = 2;
    private string effect_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Effect_ {
      get { return effect_; }
      set {
        effect_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "strength" field.</summary>
    public const int StrengthFieldNumber = 3;
    private float strength_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Strength {
      get { return strength_; }
      set {
        strength_ = value;
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 4;
    private float duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Effect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Effect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Time != other.Time) return false;
      if (Effect_ != other.Effect_) return false;
      if (Strength != other.Strength) return false;
      if (Duration != other.Duration) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Time != 0F) hash ^= Time.GetHashCode();
      if (Effect_.Length != 0) hash ^= Effect_.GetHashCode();
      if (Strength != 0F) hash ^= Strength.GetHashCode();
      if (Duration != 0F) hash ^= Duration.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Time != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Time);
      }
      if (Effect_.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Effect_);
      }
      if (Strength != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Strength);
      }
      if (Duration != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Duration);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Time != 0F) {
        size += 1 + 4;
      }
      if (Effect_.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Effect_);
      }
      if (Strength != 0F) {
        size += 1 + 4;
      }
      if (Duration != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Effect other) {
      if (other == null) {
        return;
      }
      if (other.Time != 0F) {
        Time = other.Time;
      }
      if (other.Effect_.Length != 0) {
        Effect_ = other.Effect_;
      }
      if (other.Strength != 0F) {
        Strength = other.Strength;
      }
      if (other.Duration != 0F) {
        Duration = other.Duration;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Time = input.ReadFloat();
            break;
          }
          case 18: {
            Effect_ = input.ReadString();
            break;
          }
          case 29: {
            Strength = input.ReadFloat();
            break;
          }
          case 37: {
            Duration = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Sequence : pb::IMessage<Sequence> {
    private static readonly pb::MessageParser<Sequence> _parser = new pb::MessageParser<Sequence>(() => new Sequence());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Sequence> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NullSpaceHaptics.HapticEffectReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sequence() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sequence(Sequence other) : this() {
      effects_ = other.effects_.Clone();
      time_ = other.time_;
      strength_ = other.strength_;
      area_ = other.area_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sequence Clone() {
      return new Sequence(this);
    }

    /// <summary>Field number for the "effects" field.</summary>
    public const int EffectsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::NullSpaceHaptics.Effect> _repeated_effects_codec
        = pb::FieldCodec.ForMessage(10, global::NullSpaceHaptics.Effect.Parser);
    private readonly pbc::RepeatedField<global::NullSpaceHaptics.Effect> effects_ = new pbc::RepeatedField<global::NullSpaceHaptics.Effect>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NullSpaceHaptics.Effect> Effects {
      get { return effects_; }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 2;
    private float time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "strength" field.</summary>
    public const int StrengthFieldNumber = 3;
    private float strength_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Strength {
      get { return strength_; }
      set {
        strength_ = value;
      }
    }

    /// <summary>Field number for the "area" field.</summary>
    public const int AreaFieldNumber = 4;
    private uint area_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Area {
      get { return area_; }
      set {
        area_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Sequence);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Sequence other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!effects_.Equals(other.effects_)) return false;
      if (Time != other.Time) return false;
      if (Strength != other.Strength) return false;
      if (Area != other.Area) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= effects_.GetHashCode();
      if (Time != 0F) hash ^= Time.GetHashCode();
      if (Strength != 0F) hash ^= Strength.GetHashCode();
      if (Area != 0) hash ^= Area.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      effects_.WriteTo(output, _repeated_effects_codec);
      if (Time != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Time);
      }
      if (Strength != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Strength);
      }
      if (Area != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Area);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += effects_.CalculateSize(_repeated_effects_codec);
      if (Time != 0F) {
        size += 1 + 4;
      }
      if (Strength != 0F) {
        size += 1 + 4;
      }
      if (Area != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Area);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Sequence other) {
      if (other == null) {
        return;
      }
      effects_.Add(other.effects_);
      if (other.Time != 0F) {
        Time = other.Time;
      }
      if (other.Strength != 0F) {
        Strength = other.Strength;
      }
      if (other.Area != 0) {
        Area = other.Area;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            effects_.AddEntriesFrom(input, _repeated_effects_codec);
            break;
          }
          case 21: {
            Time = input.ReadFloat();
            break;
          }
          case 29: {
            Strength = input.ReadFloat();
            break;
          }
          case 32: {
            Area = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Pattern : pb::IMessage<Pattern> {
    private static readonly pb::MessageParser<Pattern> _parser = new pb::MessageParser<Pattern>(() => new Pattern());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Pattern> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NullSpaceHaptics.HapticEffectReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pattern() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pattern(Pattern other) : this() {
      sequences_ = other.sequences_.Clone();
      time_ = other.time_;
      strength_ = other.strength_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pattern Clone() {
      return new Pattern(this);
    }

    /// <summary>Field number for the "sequences" field.</summary>
    public const int SequencesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::NullSpaceHaptics.Sequence> _repeated_sequences_codec
        = pb::FieldCodec.ForMessage(10, global::NullSpaceHaptics.Sequence.Parser);
    private readonly pbc::RepeatedField<global::NullSpaceHaptics.Sequence> sequences_ = new pbc::RepeatedField<global::NullSpaceHaptics.Sequence>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NullSpaceHaptics.Sequence> Sequences {
      get { return sequences_; }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 2;
    private float time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "strength" field.</summary>
    public const int StrengthFieldNumber = 3;
    private float strength_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Strength {
      get { return strength_; }
      set {
        strength_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Pattern);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Pattern other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!sequences_.Equals(other.sequences_)) return false;
      if (Time != other.Time) return false;
      if (Strength != other.Strength) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= sequences_.GetHashCode();
      if (Time != 0F) hash ^= Time.GetHashCode();
      if (Strength != 0F) hash ^= Strength.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      sequences_.WriteTo(output, _repeated_sequences_codec);
      if (Time != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Time);
      }
      if (Strength != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Strength);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += sequences_.CalculateSize(_repeated_sequences_codec);
      if (Time != 0F) {
        size += 1 + 4;
      }
      if (Strength != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Pattern other) {
      if (other == null) {
        return;
      }
      sequences_.Add(other.sequences_);
      if (other.Time != 0F) {
        Time = other.Time;
      }
      if (other.Strength != 0F) {
        Strength = other.Strength;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            sequences_.AddEntriesFrom(input, _repeated_sequences_codec);
            break;
          }
          case 21: {
            Time = input.ReadFloat();
            break;
          }
          case 29: {
            Strength = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Experience : pb::IMessage<Experience> {
    private static readonly pb::MessageParser<Experience> _parser = new pb::MessageParser<Experience>(() => new Experience());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Experience> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NullSpaceHaptics.HapticEffectReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Experience() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Experience(Experience other) : this() {
      patterns_ = other.patterns_.Clone();
      time_ = other.time_;
      strength_ = other.strength_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Experience Clone() {
      return new Experience(this);
    }

    /// <summary>Field number for the "patterns" field.</summary>
    public const int PatternsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::NullSpaceHaptics.Pattern> _repeated_patterns_codec
        = pb::FieldCodec.ForMessage(10, global::NullSpaceHaptics.Pattern.Parser);
    private readonly pbc::RepeatedField<global::NullSpaceHaptics.Pattern> patterns_ = new pbc::RepeatedField<global::NullSpaceHaptics.Pattern>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NullSpaceHaptics.Pattern> Patterns {
      get { return patterns_; }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 2;
    private float time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "strength" field.</summary>
    public const int StrengthFieldNumber = 3;
    private float strength_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Strength {
      get { return strength_; }
      set {
        strength_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Experience);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Experience other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!patterns_.Equals(other.patterns_)) return false;
      if (Time != other.Time) return false;
      if (Strength != other.Strength) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= patterns_.GetHashCode();
      if (Time != 0F) hash ^= Time.GetHashCode();
      if (Strength != 0F) hash ^= Strength.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      patterns_.WriteTo(output, _repeated_patterns_codec);
      if (Time != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Time);
      }
      if (Strength != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Strength);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += patterns_.CalculateSize(_repeated_patterns_codec);
      if (Time != 0F) {
        size += 1 + 4;
      }
      if (Strength != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Experience other) {
      if (other == null) {
        return;
      }
      patterns_.Add(other.patterns_);
      if (other.Time != 0F) {
        Time = other.Time;
      }
      if (other.Strength != 0F) {
        Strength = other.Strength;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            patterns_.AddEntriesFrom(input, _repeated_patterns_codec);
            break;
          }
          case 21: {
            Time = input.ReadFloat();
            break;
          }
          case 29: {
            Strength = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HapticFile : pb::IMessage<HapticFile> {
    private static readonly pb::MessageParser<HapticFile> _parser = new pb::MessageParser<HapticFile>(() => new HapticFile());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HapticFile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NullSpaceHaptics.HapticEffectReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HapticFile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HapticFile(HapticFile other) : this() {
      type_ = other.type_;
      Sequence = other.sequence_ != null ? other.Sequence.Clone() : null;
      Pattern = other.pattern_ != null ? other.Pattern.Clone() : null;
      Experience = other.experience_ != null ? other.Experience.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HapticFile Clone() {
      return new HapticFile(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::NullSpaceHaptics.HapticFile.Types.Type type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NullSpaceHaptics.HapticFile.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "sequence" field.</summary>
    public const int SequenceFieldNumber = 2;
    private global::NullSpaceHaptics.Sequence sequence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NullSpaceHaptics.Sequence Sequence {
      get { return sequence_; }
      set {
        sequence_ = value;
      }
    }

    /// <summary>Field number for the "pattern" field.</summary>
    public const int PatternFieldNumber = 3;
    private global::NullSpaceHaptics.Pattern pattern_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NullSpaceHaptics.Pattern Pattern {
      get { return pattern_; }
      set {
        pattern_ = value;
      }
    }

    /// <summary>Field number for the "experience" field.</summary>
    public const int ExperienceFieldNumber = 4;
    private global::NullSpaceHaptics.Experience experience_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NullSpaceHaptics.Experience Experience {
      get { return experience_; }
      set {
        experience_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HapticFile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HapticFile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!object.Equals(Sequence, other.Sequence)) return false;
      if (!object.Equals(Pattern, other.Pattern)) return false;
      if (!object.Equals(Experience, other.Experience)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (sequence_ != null) hash ^= Sequence.GetHashCode();
      if (pattern_ != null) hash ^= Pattern.GetHashCode();
      if (experience_ != null) hash ^= Experience.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (sequence_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Sequence);
      }
      if (pattern_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Pattern);
      }
      if (experience_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Experience);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (sequence_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sequence);
      }
      if (pattern_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pattern);
      }
      if (experience_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Experience);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HapticFile other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.sequence_ != null) {
        if (sequence_ == null) {
          sequence_ = new global::NullSpaceHaptics.Sequence();
        }
        Sequence.MergeFrom(other.Sequence);
      }
      if (other.pattern_ != null) {
        if (pattern_ == null) {
          pattern_ = new global::NullSpaceHaptics.Pattern();
        }
        Pattern.MergeFrom(other.Pattern);
      }
      if (other.experience_ != null) {
        if (experience_ == null) {
          experience_ = new global::NullSpaceHaptics.Experience();
        }
        Experience.MergeFrom(other.Experience);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::NullSpaceHaptics.HapticFile.Types.Type) input.ReadEnum();
            break;
          }
          case 18: {
            if (sequence_ == null) {
              sequence_ = new global::NullSpaceHaptics.Sequence();
            }
            input.ReadMessage(sequence_);
            break;
          }
          case 26: {
            if (pattern_ == null) {
              pattern_ = new global::NullSpaceHaptics.Pattern();
            }
            input.ReadMessage(pattern_);
            break;
          }
          case 34: {
            if (experience_ == null) {
              experience_ = new global::NullSpaceHaptics.Experience();
            }
            input.ReadMessage(experience_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the HapticFile message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("SEQUENCE")] Sequence = 1,
        [pbr::OriginalName("PATTERN")] Pattern = 2,
        [pbr::OriginalName("EXPERIENCE")] Experience = 3,
      }

    }
    #endregion

  }

  public sealed partial class RootEffect : pb::IMessage<RootEffect> {
    private static readonly pb::MessageParser<RootEffect> _parser = new pb::MessageParser<RootEffect>(() => new RootEffect());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RootEffect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NullSpaceHaptics.HapticEffectReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RootEffect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RootEffect(RootEffect other) : this() {
      name_ = other.name_;
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RootEffect Clone() {
      return new RootEffect(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::NullSpaceHaptics.RootEffect.Types.Type type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NullSpaceHaptics.RootEffect.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RootEffect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RootEffect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RootEffect other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            type_ = (global::NullSpaceHaptics.RootEffect.Types.Type) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the RootEffect message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("SEQUENCE")] Sequence = 1,
        [pbr::OriginalName("PATTERN")] Pattern = 2,
        [pbr::OriginalName("EXPERIENCE")] Experience = 3,
      }

    }
    #endregion

  }

  public sealed partial class PatternNode : pb::IMessage<PatternNode> {
    private static readonly pb::MessageParser<PatternNode> _parser = new pb::MessageParser<PatternNode>(() => new PatternNode());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PatternNode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NullSpaceHaptics.HapticEffectReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PatternNode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PatternNode(PatternNode other) : this() {
      time_ = other.time_;
      sequence_ = other.sequence_;
      area_ = other.area_;
      strength_ = other.strength_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PatternNode Clone() {
      return new PatternNode(this);
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private float time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "sequence" field.</summary>
    public const int SequenceFieldNumber = 2;
    private string sequence_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sequence {
      get { return sequence_; }
      set {
        sequence_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "area" field.</summary>
    public const int AreaFieldNumber = 3;
    private uint area_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Area {
      get { return area_; }
      set {
        area_ = value;
      }
    }

    /// <summary>Field number for the "strength" field.</summary>
    public const int StrengthFieldNumber = 4;
    private float strength_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Strength {
      get { return strength_; }
      set {
        strength_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PatternNode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PatternNode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Time != other.Time) return false;
      if (Sequence != other.Sequence) return false;
      if (Area != other.Area) return false;
      if (Strength != other.Strength) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Time != 0F) hash ^= Time.GetHashCode();
      if (Sequence.Length != 0) hash ^= Sequence.GetHashCode();
      if (Area != 0) hash ^= Area.GetHashCode();
      if (Strength != 0F) hash ^= Strength.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Time != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Time);
      }
      if (Sequence.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Sequence);
      }
      if (Area != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Area);
      }
      if (Strength != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Strength);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Time != 0F) {
        size += 1 + 4;
      }
      if (Sequence.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sequence);
      }
      if (Area != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Area);
      }
      if (Strength != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PatternNode other) {
      if (other == null) {
        return;
      }
      if (other.Time != 0F) {
        Time = other.Time;
      }
      if (other.Sequence.Length != 0) {
        Sequence = other.Sequence;
      }
      if (other.Area != 0) {
        Area = other.Area;
      }
      if (other.Strength != 0F) {
        Strength = other.Strength;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Time = input.ReadFloat();
            break;
          }
          case 18: {
            Sequence = input.ReadString();
            break;
          }
          case 24: {
            Area = input.ReadUInt32();
            break;
          }
          case 37: {
            Strength = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ExperienceNode : pb::IMessage<ExperienceNode> {
    private static readonly pb::MessageParser<ExperienceNode> _parser = new pb::MessageParser<ExperienceNode>(() => new ExperienceNode());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExperienceNode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NullSpaceHaptics.HapticEffectReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExperienceNode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExperienceNode(ExperienceNode other) : this() {
      time_ = other.time_;
      pattern_ = other.pattern_;
      strength_ = other.strength_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExperienceNode Clone() {
      return new ExperienceNode(this);
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private float time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "pattern" field.</summary>
    public const int PatternFieldNumber = 2;
    private string pattern_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Pattern {
      get { return pattern_; }
      set {
        pattern_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "strength" field.</summary>
    public const int StrengthFieldNumber = 3;
    private float strength_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Strength {
      get { return strength_; }
      set {
        strength_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExperienceNode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExperienceNode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Time != other.Time) return false;
      if (Pattern != other.Pattern) return false;
      if (Strength != other.Strength) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Time != 0F) hash ^= Time.GetHashCode();
      if (Pattern.Length != 0) hash ^= Pattern.GetHashCode();
      if (Strength != 0F) hash ^= Strength.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Time != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Time);
      }
      if (Pattern.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Pattern);
      }
      if (Strength != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Strength);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Time != 0F) {
        size += 1 + 4;
      }
      if (Pattern.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pattern);
      }
      if (Strength != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExperienceNode other) {
      if (other == null) {
        return;
      }
      if (other.Time != 0F) {
        Time = other.Time;
      }
      if (other.Pattern.Length != 0) {
        Pattern = other.Pattern;
      }
      if (other.Strength != 0F) {
        Strength = other.Strength;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Time = input.ReadFloat();
            break;
          }
          case 18: {
            Pattern = input.ReadString();
            break;
          }
          case 29: {
            Strength = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SequenceDefinitions : pb::IMessage<SequenceDefinitions> {
    private static readonly pb::MessageParser<SequenceDefinitions> _parser = new pb::MessageParser<SequenceDefinitions>(() => new SequenceDefinitions());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SequenceDefinitions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NullSpaceHaptics.HapticEffectReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SequenceDefinitions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SequenceDefinitions(SequenceDefinitions other) : this() {
      effects_ = other.effects_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SequenceDefinitions Clone() {
      return new SequenceDefinitions(this);
    }

    /// <summary>Field number for the "effects" field.</summary>
    public const int EffectsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::NullSpaceHaptics.Effect> _repeated_effects_codec
        = pb::FieldCodec.ForMessage(10, global::NullSpaceHaptics.Effect.Parser);
    private readonly pbc::RepeatedField<global::NullSpaceHaptics.Effect> effects_ = new pbc::RepeatedField<global::NullSpaceHaptics.Effect>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NullSpaceHaptics.Effect> Effects {
      get { return effects_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SequenceDefinitions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SequenceDefinitions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!effects_.Equals(other.effects_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= effects_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      effects_.WriteTo(output, _repeated_effects_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += effects_.CalculateSize(_repeated_effects_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SequenceDefinitions other) {
      if (other == null) {
        return;
      }
      effects_.Add(other.effects_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            effects_.AddEntriesFrom(input, _repeated_effects_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PatternDefinitions : pb::IMessage<PatternDefinitions> {
    private static readonly pb::MessageParser<PatternDefinitions> _parser = new pb::MessageParser<PatternDefinitions>(() => new PatternDefinitions());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PatternDefinitions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NullSpaceHaptics.HapticEffectReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PatternDefinitions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PatternDefinitions(PatternDefinitions other) : this() {
      patternNodes_ = other.patternNodes_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PatternDefinitions Clone() {
      return new PatternDefinitions(this);
    }

    /// <summary>Field number for the "pattern_nodes" field.</summary>
    public const int PatternNodesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::NullSpaceHaptics.PatternNode> _repeated_patternNodes_codec
        = pb::FieldCodec.ForMessage(10, global::NullSpaceHaptics.PatternNode.Parser);
    private readonly pbc::RepeatedField<global::NullSpaceHaptics.PatternNode> patternNodes_ = new pbc::RepeatedField<global::NullSpaceHaptics.PatternNode>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NullSpaceHaptics.PatternNode> PatternNodes {
      get { return patternNodes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PatternDefinitions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PatternDefinitions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!patternNodes_.Equals(other.patternNodes_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= patternNodes_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      patternNodes_.WriteTo(output, _repeated_patternNodes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += patternNodes_.CalculateSize(_repeated_patternNodes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PatternDefinitions other) {
      if (other == null) {
        return;
      }
      patternNodes_.Add(other.patternNodes_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            patternNodes_.AddEntriesFrom(input, _repeated_patternNodes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ExperienceDefinitions : pb::IMessage<ExperienceDefinitions> {
    private static readonly pb::MessageParser<ExperienceDefinitions> _parser = new pb::MessageParser<ExperienceDefinitions>(() => new ExperienceDefinitions());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExperienceDefinitions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NullSpaceHaptics.HapticEffectReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExperienceDefinitions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExperienceDefinitions(ExperienceDefinitions other) : this() {
      experienceNodes_ = other.experienceNodes_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExperienceDefinitions Clone() {
      return new ExperienceDefinitions(this);
    }

    /// <summary>Field number for the "experience_nodes" field.</summary>
    public const int ExperienceNodesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::NullSpaceHaptics.ExperienceNode> _repeated_experienceNodes_codec
        = pb::FieldCodec.ForMessage(10, global::NullSpaceHaptics.ExperienceNode.Parser);
    private readonly pbc::RepeatedField<global::NullSpaceHaptics.ExperienceNode> experienceNodes_ = new pbc::RepeatedField<global::NullSpaceHaptics.ExperienceNode>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NullSpaceHaptics.ExperienceNode> ExperienceNodes {
      get { return experienceNodes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExperienceDefinitions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExperienceDefinitions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!experienceNodes_.Equals(other.experienceNodes_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= experienceNodes_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      experienceNodes_.WriteTo(output, _repeated_experienceNodes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += experienceNodes_.CalculateSize(_repeated_experienceNodes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExperienceDefinitions other) {
      if (other == null) {
        return;
      }
      experienceNodes_.Add(other.experienceNodes_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            experienceNodes_.AddEntriesFrom(input, _repeated_experienceNodes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class HapticDescriptionFile : pb::IMessage<HapticDescriptionFile> {
    private static readonly pb::MessageParser<HapticDescriptionFile> _parser = new pb::MessageParser<HapticDescriptionFile>(() => new HapticDescriptionFile());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HapticDescriptionFile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NullSpaceHaptics.HapticEffectReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HapticDescriptionFile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HapticDescriptionFile(HapticDescriptionFile other) : this() {
      Effect = other.effect_ != null ? other.Effect.Clone() : null;
      sequenceDefinitions_ = other.sequenceDefinitions_.Clone();
      patternDefinitions_ = other.patternDefinitions_.Clone();
      experienceDefinitions_ = other.experienceDefinitions_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HapticDescriptionFile Clone() {
      return new HapticDescriptionFile(this);
    }

    /// <summary>Field number for the "effect" field.</summary>
    public const int EffectFieldNumber = 1;
    private global::NullSpaceHaptics.RootEffect effect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NullSpaceHaptics.RootEffect Effect {
      get { return effect_; }
      set {
        effect_ = value;
      }
    }

    /// <summary>Field number for the "sequence_definitions" field.</summary>
    public const int SequenceDefinitionsFieldNumber = 2;
    private static readonly pbc::MapField<string, global::NullSpaceHaptics.SequenceDefinitions>.Codec _map_sequenceDefinitions_codec
        = new pbc::MapField<string, global::NullSpaceHaptics.SequenceDefinitions>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::NullSpaceHaptics.SequenceDefinitions.Parser), 18);
    private readonly pbc::MapField<string, global::NullSpaceHaptics.SequenceDefinitions> sequenceDefinitions_ = new pbc::MapField<string, global::NullSpaceHaptics.SequenceDefinitions>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::NullSpaceHaptics.SequenceDefinitions> SequenceDefinitions {
      get { return sequenceDefinitions_; }
    }

    /// <summary>Field number for the "pattern_definitions" field.</summary>
    public const int PatternDefinitionsFieldNumber = 3;
    private static readonly pbc::MapField<string, global::NullSpaceHaptics.PatternDefinitions>.Codec _map_patternDefinitions_codec
        = new pbc::MapField<string, global::NullSpaceHaptics.PatternDefinitions>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::NullSpaceHaptics.PatternDefinitions.Parser), 26);
    private readonly pbc::MapField<string, global::NullSpaceHaptics.PatternDefinitions> patternDefinitions_ = new pbc::MapField<string, global::NullSpaceHaptics.PatternDefinitions>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::NullSpaceHaptics.PatternDefinitions> PatternDefinitions {
      get { return patternDefinitions_; }
    }

    /// <summary>Field number for the "experience_definitions" field.</summary>
    public const int ExperienceDefinitionsFieldNumber = 4;
    private static readonly pbc::MapField<string, global::NullSpaceHaptics.ExperienceDefinitions>.Codec _map_experienceDefinitions_codec
        = new pbc::MapField<string, global::NullSpaceHaptics.ExperienceDefinitions>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::NullSpaceHaptics.ExperienceDefinitions.Parser), 34);
    private readonly pbc::MapField<string, global::NullSpaceHaptics.ExperienceDefinitions> experienceDefinitions_ = new pbc::MapField<string, global::NullSpaceHaptics.ExperienceDefinitions>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::NullSpaceHaptics.ExperienceDefinitions> ExperienceDefinitions {
      get { return experienceDefinitions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HapticDescriptionFile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HapticDescriptionFile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Effect, other.Effect)) return false;
      if (!SequenceDefinitions.Equals(other.SequenceDefinitions)) return false;
      if (!PatternDefinitions.Equals(other.PatternDefinitions)) return false;
      if (!ExperienceDefinitions.Equals(other.ExperienceDefinitions)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (effect_ != null) hash ^= Effect.GetHashCode();
      hash ^= SequenceDefinitions.GetHashCode();
      hash ^= PatternDefinitions.GetHashCode();
      hash ^= ExperienceDefinitions.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (effect_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Effect);
      }
      sequenceDefinitions_.WriteTo(output, _map_sequenceDefinitions_codec);
      patternDefinitions_.WriteTo(output, _map_patternDefinitions_codec);
      experienceDefinitions_.WriteTo(output, _map_experienceDefinitions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (effect_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Effect);
      }
      size += sequenceDefinitions_.CalculateSize(_map_sequenceDefinitions_codec);
      size += patternDefinitions_.CalculateSize(_map_patternDefinitions_codec);
      size += experienceDefinitions_.CalculateSize(_map_experienceDefinitions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HapticDescriptionFile other) {
      if (other == null) {
        return;
      }
      if (other.effect_ != null) {
        if (effect_ == null) {
          effect_ = new global::NullSpaceHaptics.RootEffect();
        }
        Effect.MergeFrom(other.Effect);
      }
      sequenceDefinitions_.Add(other.sequenceDefinitions_);
      patternDefinitions_.Add(other.patternDefinitions_);
      experienceDefinitions_.Add(other.experienceDefinitions_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (effect_ == null) {
              effect_ = new global::NullSpaceHaptics.RootEffect();
            }
            input.ReadMessage(effect_);
            break;
          }
          case 18: {
            sequenceDefinitions_.AddEntriesFrom(input, _map_sequenceDefinitions_codec);
            break;
          }
          case 26: {
            patternDefinitions_.AddEntriesFrom(input, _map_patternDefinitions_codec);
            break;
          }
          case 34: {
            experienceDefinitions_.AddEntriesFrom(input, _map_experienceDefinitions_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
